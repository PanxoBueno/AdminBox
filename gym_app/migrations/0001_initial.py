# Generated by Django 5.2 on 2025-05-02 14:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Biblioteca',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=30)),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('imagen', models.ImageField(null=True, upload_to='ejercicios')),
            ],
        ),
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tipo_usuario', models.CharField(blank=True, choices=[('atleta', 'Atleta'), ('entrenador', 'Entrenador')], max_length=20, null=True, verbose_name='Tipo de Usuario')),
                ('plan', models.CharField(blank=True, choices=[('1', '8 Clases'), ('2', '12 Clases'), ('3', '16 Clases'), ('4', 'Open Box'), ('5', 'Full Clases'), ('6', 'Staff')], max_length=20, null=True, verbose_name='Plan')),
                ('nivel', models.CharField(blank=True, choices=[('amateur', 'Amateur'), ('rookie', 'Rookie'), ('scaled', 'Scaled'), ('rx', 'Rx'), ('elite', 'Elite')], max_length=20, null=True, verbose_name='Nivel')),
                ('especialidad', models.CharField(blank=True, choices=[('crossfit', 'CrossFit'), ('halterofilia', 'Halterofilia'), ('metcon', 'Metcon')], max_length=20, null=True, verbose_name='Especialidad')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Atleta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nivel', models.CharField(choices=[('amateur', 'Amateur'), ('rookie', 'Rookie'), ('scaled', 'Scaled'), ('rx', 'Rx'), ('elite', 'Elite')], max_length=20, verbose_name='Nivel')),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='perfil_atleta', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Entrenador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('especialidad', models.CharField(choices=[('halterofilia', 'Halterofilia'), ('gimnasio', 'Gimnasio'), ('metcon', 'Metcon'), ('crossfit', 'CrossFit')], max_length=20, verbose_name='Especialidad')),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='perfil_entrenador', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Clase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('horario', models.CharField(choices=[('06:00', '06:00 AM'), ('07:00', '07:00 AM'), ('08:00', '08:00 AM'), ('17:00', '05:00 PM'), ('18:00', '06:00 PM'), ('19:00', '07:00 PM')], max_length=5)),
                ('fecha', models.DateField()),
                ('capacidad_maxima', models.PositiveIntegerField(default=15)),
                ('entrenador', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='gym_app.entrenador')),
            ],
        ),
        migrations.CreateModel(
            name='MarcaPersonal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peso_lb', models.DecimalField(decimal_places=2, max_digits=6)),
                ('fecha', models.DateField()),
                ('comentarios', models.TextField(blank=True, null=True)),
                ('atleta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marcas_personales', to='gym_app.atleta')),
                ('ejercicio_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gym_app.biblioteca', verbose_name='Ejercicio')),
            ],
            options={
                'verbose_name_plural': 'Marcas Personales',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='Rutina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('calentamiento', 'Calentamiento'), ('trabajo', 'Trabajo Técnico/Principal'), ('wod', 'WOD (Entrenamiento del día)'), ('enfriamiento', 'Enfriamiento')], max_length=20)),
                ('descripcion', models.TextField()),
                ('orden', models.PositiveIntegerField(default=0)),
                ('clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rutinas', to='gym_app.clase')),
            ],
            options={
                'ordering': ['orden'],
            },
        ),
        migrations.CreateModel(
            name='RankingWOD',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tiempo_minutos', models.PositiveIntegerField(verbose_name='Minutos')),
                ('tiempo_segundos', models.PositiveIntegerField(verbose_name='Segundos')),
                ('fecha_registro', models.DateTimeField(auto_now_add=True)),
                ('atleta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gym_app.atleta')),
                ('clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rankings', to='gym_app.clase')),
            ],
            options={
                'verbose_name_plural': 'Rankings WOD',
                'ordering': ['tiempo_minutos', 'tiempo_segundos'],
                'unique_together': {('clase', 'atleta')},
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_reserva', models.DateTimeField(auto_now_add=True)),
                ('atleta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gym_app.atleta')),
                ('clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gym_app.clase')),
            ],
            options={
                'unique_together': {('atleta', 'clase')},
            },
        ),
    ]
